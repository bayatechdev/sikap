// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// =============================================
// SIKAP Database Schema - Prisma Format
// Converted from MySQL to PostgreSQL
// =============================================

// User Management (Admin Only)
model User {
  id               String    @id @default(cuid())
  email            String    @unique
  username         String    @unique
  passwordHash     String    @map("password_hash")
  fullName         String    @map("full_name")
  phone            String?
  status           UserStatus @default(PENDING_VERIFICATION)
  emailVerifiedAt  DateTime? @map("email_verified_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  userRoles        UserRole[]
  applications     Application[] @relation("Submitter")
  assignedApplications Application[] @relation("AssignedTo")
  notifications    Notification[]
  activityLogs     ActivityLog[]
  approvals        Approval[]
  uploadedDocuments Document[] @relation("UploadedBy")
  generatedReports Report[]
  statusChanges    ApplicationStatusHistory[] @relation("ChangedBy")

  @@map("users")
}

model Role {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  description     String?
  permissionsJson Json     @map("permissions_json")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  userRoles       UserRole[]

  @@map("roles")
}

model UserRole {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  roleId     Int       @map("role_id")
  assignedBy String    @map("assigned_by")
  assignedAt DateTime  @default(now()) @map("assigned_at")
  expiresAt  DateTime? @map("expires_at")

  // Relations
  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role       Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@map("user_roles")
}

// Application Core
model Application {
  id                    String            @id @default(cuid())
  userId                String?           @map("user_id") // Nullable for public submissions
  applicationTypeId     Int               @map("application_type_id")
  institutionId         Int?              @map("institution_id")
  cooperationCategoryId Int?              @map("cooperation_category_id")

  // Public tracking system
  trackingNumber        String            @unique @map("tracking_number")
  publicToken           String            @unique @map("public_token")
  isPublicSubmission    Boolean           @default(true) @map("is_public_submission")

  // Basic information
  title                 String
  description           String
  purpose               String            // Keperluan
  about                 String            // Tentang
  notes                 String?           // Catatan

  // Contact information
  contactPerson         String            @map("contact_person")
  contactEmail          String            @map("contact_email")
  contactPhone          String            @map("contact_phone")
  institutionName       String            @map("institution_name")

  // Status and workflow
  status                ApplicationStatus @default(DRAFT)
  priority              Priority          @default(NORMAL)

  // Timestamps
  submittedAt           DateTime?         @map("submitted_at")
  reviewedAt            DateTime?         @map("reviewed_at")
  approvedAt            DateTime?         @map("approved_at")
  rejectedAt            DateTime?         @map("rejected_at")
  dueDate               DateTime?         @map("due_date")
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")

  // Assignment
  assignedTo            String?           @map("assigned_to")
  assignedAt            DateTime?         @map("assigned_at")

  // Rejection details
  rejectionReason       String?           @map("rejection_reason")
  revisionNotes         String?           @map("revision_notes")

  // Relations
  user                  User?             @relation("Submitter", fields: [userId], references: [id], onDelete: SetNull)
  applicationType       ApplicationType   @relation(fields: [applicationTypeId], references: [id])
  institution           Institution?      @relation(fields: [institutionId], references: [id], onDelete: SetNull)
  cooperationCategory   CooperationCategory? @relation(fields: [cooperationCategoryId], references: [id], onDelete: SetNull)
  assignedUser          User?             @relation("AssignedTo", fields: [assignedTo], references: [id], onDelete: SetNull)

  applicationData       ApplicationData[]
  documents             Document[]
  workflows             ApplicationWorkflow[]
  approvals             Approval[]
  statusHistory         ApplicationStatusHistory[]
  publicSubmission      PublicSubmission?
  emailNotifications    EmailNotification[]
  cooperations          Cooperation[] @relation("ApplicationCooperations")

  @@map("applications")
}

model ApplicationType {
  id                     Int                 @id @default(autoincrement())
  code                   String              @unique
  name                   String
  description            String?
  requiredDocumentsJson  Json                @map("required_documents_json")
  workflowStepsJson      Json                @map("workflow_steps_json")
  active                 Boolean             @default(true)
  createdAt              DateTime            @default(now()) @map("created_at")
  updatedAt              DateTime            @updatedAt @map("updated_at")

  // Relations
  applications           Application[]
  documentRequirements   DocumentRequirement[]

  @@map("application_types")
}

model ApplicationData {
  id            String      @id @default(cuid())
  applicationId String      @map("application_id")
  fieldKey      String      @map("field_key")
  fieldValue    String      @map("field_value")
  fieldType     String      @map("field_type")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  // Relations
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_data")
}

model ApplicationWorkflow {
  id            String                  @id @default(cuid())
  applicationId String                  @map("application_id")
  stepName      String                  @map("step_name")
  status        WorkflowStatus          @default(PENDING)
  assignedTo    String?                 @map("assigned_to")
  completedAt   DateTime?               @map("completed_at")
  notes         String?
  createdAt     DateTime                @default(now()) @map("created_at")

  // Relations
  application   Application             @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_workflows")
}

// Public Submission System
model PublicSubmission {
  id                        String    @id @default(cuid())
  applicationId             String    @unique @map("application_id")
  trackingNumber            String    @unique @map("tracking_number")
  publicToken               String    @unique @map("public_token")
  contactEmail              String    @map("contact_email")
  contactPhone              String    @map("contact_phone")
  contactPerson             String    @map("contact_person")
  lastAccessed              DateTime? @map("last_accessed")
  emailNotificationsEnabled Boolean   @default(true) @map("email_notifications_enabled")
  createdAt                 DateTime  @default(now()) @map("created_at")

  // Relations
  application               Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("public_submissions")
}

model ApplicationStatusHistory {
  id              String    @id @default(cuid())
  applicationId   String    @map("application_id")
  previousStatus  String?   @map("previous_status")
  newStatus       String    @map("new_status")
  changedBy       String?   @map("changed_by")
  notes           String?
  notifyApplicant Boolean   @default(true) @map("notify_applicant")
  changedAt       DateTime  @default(now()) @map("changed_at")

  // Relations
  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  changedByUser   User?       @relation("ChangedBy", fields: [changedBy], references: [id], onDelete: SetNull)

  @@map("application_status_history")
}

model EmailNotification {
  id               String               @id @default(cuid())
  applicationId    String               @map("application_id")
  recipientEmail   String               @map("recipient_email")
  subject          String
  message          String
  notificationType NotificationType     @map("notification_type")
  status           EmailStatus          @default(PENDING)
  errorMessage     String?              @map("error_message")
  createdAt        DateTime             @default(now()) @map("created_at")
  sentAt           DateTime?            @map("sent_at")

  // Relations
  application      Application          @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("email_notifications")
}

// Document Management
model Document {
  id                     String               @id @default(cuid())
  applicationId          String               @map("application_id")
  documentRequirementId  Int?                 @map("document_requirement_id")
  originalFilename       String               @map("original_filename")
  storedFilename         String               @map("stored_filename")
  relativePath           String               @map("relative_path") // Relative path from upload directory
  fileSize               Int                  @map("file_size")
  mimeType               String               @map("mime_type")
  fileHash               String?              @map("file_hash") // SHA-256 for integrity
  virusScanResult        String?              @map("virus_scan_result") // JSON as string for SQLite
  uploadedBy             String?              @map("uploaded_by")
  documentType           String               @map("document_type")
  uploadedAt             DateTime             @default(now()) @map("uploaded_at")

  // Relations
  application            Application          @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  documentRequirement    DocumentRequirement? @relation(fields: [documentRequirementId], references: [id], onDelete: SetNull)
  uploader               User?                @relation("UploadedBy", fields: [uploadedBy], references: [id], onDelete: SetNull)

  @@map("documents")
}

model DocumentRequirement {
  id                Int               @id @default(autoincrement())
  applicationTypeId Int               @map("application_type_id")
  documentName      String            @map("document_name")
  isRequired        Boolean           @map("is_required")
  allowedFormats    String            @map("allowed_formats")
  maxFileSize       Int               @map("max_file_size")
  description       String?
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")

  // Relations
  applicationType   ApplicationType   @relation(fields: [applicationTypeId], references: [id], onDelete: Cascade)
  documents         Document[]

  @@map("document_requirements")
}

// Workflow & Approval
model Approval {
  id            String        @id @default(cuid())
  applicationId String        @map("application_id")
  reviewerId    String        @map("reviewer_id")
  status        ApprovalStatus
  comments      String?
  reviewedAt    DateTime      @default(now()) @map("reviewed_at")
  createdAt     DateTime      @default(now()) @map("created_at")

  // Relations
  application   Application   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  reviewer      User          @relation(fields: [reviewerId], references: [id])

  @@map("approvals")
}

model Notification {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  title       String
  message     String
  type        String
  readAt      DateTime? @map("read_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  actionUrl   String?   @map("action_url")
  relatedId   String?   @map("related_id")

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  entityType  String   @map("entity_type")
  entityId    String   @map("entity_id")
  action      String
  description String
  ipAddress   String   @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

// Reference Data
model Institution {
  id            Int           @id @default(autoincrement())
  name          String
  type          InstitutionType
  code          String        @unique
  address       String?
  contactPerson String?       @map("contact_person")
  phone         String?
  email         String?
  active        Boolean       @default(true)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Relations
  applications  Application[]

  @@map("institutions")
}

model CooperationCategory {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  icon         String?
  active       Boolean       @default(true)
  sortOrder    Int           @map("sort_order")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  // Relations
  applications Application[]

  @@map("cooperation_categories")
}

model LegalDocument {
  id             Int      @id @default(autoincrement())
  title          String
  documentNumber String   @unique @map("document_number")
  year           String
  category       String
  relativePath   String   @map("relative_path") // Relative path from upload directory
  description    String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("legal_documents")
}

model Setting {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  type        String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

// Analytics & Reporting
model DashboardStat {
  id        String   @id @default(cuid())
  statKey   String   @map("stat_key")
  statValue String   @map("stat_value")
  date      DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("dashboard_stats")
}

model Report {
  id             String    @id @default(cuid())
  generatedBy    String    @map("generated_by")
  reportType     String    @map("report_type")
  parametersJson Json      @map("parameters_json")
  relativePath   String    @map("relative_path") // Relative path from upload directory
  generatedAt    DateTime  @default(now()) @map("generated_at")
  expiresAt      DateTime  @map("expires_at")

  // Relations
  generator      User      @relation(fields: [generatedBy], references: [id])

  @@map("reports")
}

// Enums
enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED

  @@map("user_status")
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  DOCUMENT_VERIFICATION
  LEGAL_REVIEW
  APPROVAL_PENDING
  APPROVED
  REJECTED
  REVISION_REQUIRED
  CANCELLED

  @@map("application_status")
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT

  @@map("priority")
}

enum WorkflowStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED

  @@map("workflow_status")
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED

  @@map("approval_status")
}

enum NotificationType {
  STATUS_CHANGE
  DOCUMENT_UPLOAD
  APPROVAL_REQUEST
  REJECTION_NOTICE
  REVISION_REQUEST
  DEADLINE_REMINDER
  SUBMISSION_CONFIRMATION

  @@map("notification_type")
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED

  @@map("email_status")
}

enum InstitutionType {
  UNIVERSITY
  PRIVATE_COMPANY
  HOSPITAL
  GOVERNMENT
  FINANCIAL
  NGO
  OTHER

  @@map("institution_type")
}

// Cooperation Management
model Cooperation {
  id                    String   @id @default(cuid())
  applicationId         String?  @map("application_id") // Optional reference to Application

  // Core cooperation data
  title                 String   // Tentang kerjasama
  cooperationType       String   // MOU, PKS, NK
  cooperationTypeColor  String   @map("cooperation_type_color") // primary, blue, green for badge
  orgUnit               String   @map("org_unit") // OPD yang menangani
  partnerInstitution    String   @map("partner_institution") // Nama instansi partner

  // Dates
  cooperationDate       DateTime @map("cooperation_date") // Tanggal penandatanganan
  startDate             DateTime? @map("start_date") // Mulai berlaku
  endDate               DateTime? @map("end_date") // Berakhir

  // Location & Details
  location              String   // Tempat penandatanganan
  description           String?  // Deskripsi lengkap
  objectives            String?  // Tujuan kerjasama
  scope                 String?  // Ruang lingkup

  // Documents
  documentPath          String?  @map("document_path") // Path file dokumen MOU/PKS
  documentNumber        String?  @map("document_number") // Nomor dokumen resmi
  documentSize          Int?     @map("document_size") // File size
  documentMimeType      String?  @map("document_mime_type") // MIME type

  // Status & Metadata
  status                CooperationStatus @default(ACTIVE)
  notes                 String?  // Catatan admin
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  // Relations
  application           Application? @relation("ApplicationCooperations", fields: [applicationId], references: [id], onDelete: SetNull)

  @@map("cooperations")
}

enum CooperationStatus {
  ACTIVE      // Kerjasama aktif
  EXPIRED     // Sudah berakhir
  TERMINATED  // Dibatalkan
  DRAFT       // Draft belum publish

  @@map("cooperation_status")
}
