generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                     @id @default(cuid())
  email                String                     @unique
  username             String                     @unique
  passwordHash         String                     @map("password_hash")
  fullName             String                     @map("full_name")
  phone                String?
  status               UserStatus                 @default("PENDING_VERIFICATION")
  emailVerifiedAt      DateTime?                  @map("email_verified_at")
  createdAt            DateTime                   @default(now()) @map("created_at")
  updatedAt            DateTime                   @updatedAt @map("updated_at")
  activityLogs         ActivityLog[]
  statusChanges        ApplicationStatusHistory[] @relation("ChangedBy")
  assignedApplications Application[]              @relation("AssignedTo")
  applications         Application[]              @relation("Submitter")
  approvals            Approval[]
  uploadedDocuments    Document[]                 @relation("UploadedBy")
  notifications        Notification[]
  generatedReports     Report[]
  userRoles            UserRole[]

  @@map("users")
}

model Role {
  id              Int        @id @default(autoincrement())
  name            String     @unique
  description     String?
  permissionsJson Json       @map("permissions_json")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  userRoles       UserRole[]

  @@map("roles")
}

model UserRole {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  roleId     Int       @map("role_id")
  assignedBy String    @map("assigned_by")
  assignedAt DateTime  @default(now()) @map("assigned_at")
  expiresAt  DateTime? @map("expires_at")
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_roles")
}

model Application {
  id                    String                     @id @default(cuid())
  userId                String?                    @map("user_id")
  cooperationTypeId     Int                        @map("cooperation_type_id")
  institutionId         Int?                       @map("institution_id")
  cooperationCategoryId Int?                       @map("cooperation_category_id")
  trackingNumber        String                     @unique @map("tracking_number")
  publicToken           String                     @unique @map("public_token")
  isPublicSubmission    Boolean                    @default(true) @map("is_public_submission")
  title                 String
  description           String
  purpose               String
  about                 String
  notes                 String?
  contactPerson         String                     @map("contact_person")
  contactEmail          String                     @map("contact_email")
  contactPhone          String                     @map("contact_phone")
  institutionName       String                     @map("institution_name")
  status                ApplicationStatus          @default("DRAFT")
  priority              Priority                   @default("NORMAL")
  submittedAt           DateTime?                  @map("submitted_at")
  reviewedAt            DateTime?                  @map("reviewed_at")
  approvedAt            DateTime?                  @map("approved_at")
  rejectedAt            DateTime?                  @map("rejected_at")
  dueDate               DateTime?                  @map("due_date")
  createdAt             DateTime                   @default(now()) @map("created_at")
  updatedAt             DateTime                   @updatedAt @map("updated_at")
  assignedTo            String?                    @map("assigned_to")
  assignedAt            DateTime?                  @map("assigned_at")
  rejectionReason       String?                    @map("rejection_reason")
  revisionNotes         String?                    @map("revision_notes")
  applicationData       ApplicationData[]
  statusHistory         ApplicationStatusHistory[]
  workflows             ApplicationWorkflow[]
  assignedUser          User?                      @relation("AssignedTo", fields: [assignedTo], references: [id])
  cooperationCategory   CooperationCategory?       @relation(fields: [cooperationCategoryId], references: [id])
  institution           Institution?               @relation(fields: [institutionId], references: [id])
  cooperationType       CooperationType            @relation(fields: [cooperationTypeId], references: [id])
  user                  User?                      @relation("Submitter", fields: [userId], references: [id])
  approvals             Approval[]
  cooperations          Cooperation[]              @relation("ApplicationCooperations")
  documents             Document[]
  emailNotifications    EmailNotification[]
  publicSubmission      PublicSubmission?

  @@map("applications")
}

model CooperationType {
  id                    Int                   @id @default(autoincrement())
  code                  String                @unique
  name                  String
  description           String?
  displayTitle          String?               @map("display_title")
  longDescription       String?               @map("long_description")
  features              Json?
  examples              Json?
  downloadInfo          Json?                 @map("download_info")
  color                 String?
  icon                  String?
  displayOrder          Int                   @default(0) @map("display_order")
  showOnHomepage        Boolean               @default(true) @map("show_on_homepage")
  requiredDocumentsJson Json                  @map("required_documents_json")
  workflowStepsJson     Json                  @map("workflow_steps_json")
  active                Boolean               @default(true)
  createdAt             DateTime              @default(now()) @map("created_at")
  updatedAt             DateTime              @updatedAt @map("updated_at")
  applications          Application[]
  documentRequirements  DocumentRequirement[]

  @@map("cooperation_types")
}

model ApplicationData {
  id            String      @id @default(cuid())
  applicationId String      @map("application_id")
  fieldKey      String      @map("field_key")
  fieldValue    String      @map("field_value")
  fieldType     String      @map("field_type")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_data")
}

model ApplicationWorkflow {
  id            String         @id @default(cuid())
  applicationId String         @map("application_id")
  stepName      String         @map("step_name")
  status        WorkflowStatus @default("PENDING")
  assignedTo    String?        @map("assigned_to")
  completedAt   DateTime?      @map("completed_at")
  notes         String?
  createdAt     DateTime       @default(now()) @map("created_at")
  application   Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_workflows")
}

model PublicSubmission {
  id                        String      @id @default(cuid())
  applicationId             String      @unique @map("application_id")
  trackingNumber            String      @unique @map("tracking_number")
  publicToken               String      @unique @map("public_token")
  contactEmail              String      @map("contact_email")
  contactPhone              String      @map("contact_phone")
  contactPerson             String      @map("contact_person")
  lastAccessed              DateTime?   @map("last_accessed")
  emailNotificationsEnabled Boolean     @default(true) @map("email_notifications_enabled")
  createdAt                 DateTime    @default(now()) @map("created_at")
  application               Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("public_submissions")
}

model ApplicationStatusHistory {
  id              String      @id @default(cuid())
  applicationId   String      @map("application_id")
  previousStatus  String?     @map("previous_status")
  newStatus       String      @map("new_status")
  changedBy       String?     @map("changed_by")
  notes           String?
  notifyApplicant Boolean     @default(true) @map("notify_applicant")
  changedAt       DateTime    @default(now()) @map("changed_at")
  changedByUser   User?       @relation("ChangedBy", fields: [changedBy], references: [id])
  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_status_history")
}

model EmailNotification {
  id               String           @id @default(cuid())
  applicationId    String           @map("application_id")
  recipientEmail   String           @map("recipient_email")
  subject          String
  message          String
  notificationType NotificationType @map("notification_type")
  status           EmailStatus      @default("PENDING")
  errorMessage     String?          @map("error_message")
  createdAt        DateTime         @default(now()) @map("created_at")
  sentAt           DateTime?        @map("sent_at")
  application      Application      @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("email_notifications")
}

model Document {
  id                    String               @id @default(cuid())
  applicationId         String               @map("application_id")
  documentRequirementId Int?                 @map("document_requirement_id")
  originalFilename      String               @map("original_filename")
  storedFilename        String               @map("stored_filename")
  relativePath          String               @map("relative_path")
  fileSize              Int                  @map("file_size")
  mimeType              String               @map("mime_type")
  fileHash              String?              @map("file_hash")
  virusScanResult       String?              @map("virus_scan_result")
  uploadedBy            String?              @map("uploaded_by")
  documentType          String               @map("document_type")
  uploadedAt            DateTime             @default(now()) @map("uploaded_at")
  uploader              User?                @relation("UploadedBy", fields: [uploadedBy], references: [id])
  documentRequirement   DocumentRequirement? @relation(fields: [documentRequirementId], references: [id])
  application           Application          @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model DocumentRequirement {
  id                Int             @id @default(autoincrement())
  cooperationTypeId Int             @map("cooperation_type_id")
  documentName      String          @map("document_name")
  isRequired        Boolean         @map("is_required")
  allowedFormats    String          @map("allowed_formats")
  maxFileSize       Int             @map("max_file_size")
  description       String?
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  cooperationType   CooperationType @relation(fields: [cooperationTypeId], references: [id], onDelete: Cascade)
  documents         Document[]

  @@map("document_requirements")
}

model Approval {
  id            String         @id @default(cuid())
  applicationId String         @map("application_id")
  reviewerId    String         @map("reviewer_id")
  status        ApprovalStatus
  comments      String?
  reviewedAt    DateTime       @default(now()) @map("reviewed_at")
  createdAt     DateTime       @default(now()) @map("created_at")
  reviewer      User           @relation(fields: [reviewerId], references: [id])
  application   Application    @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("approvals")
}

model Notification {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  title     String
  message   String
  type      String
  readAt    DateTime? @map("read_at")
  createdAt DateTime  @default(now()) @map("created_at")
  actionUrl String?   @map("action_url")
  relatedId String?   @map("related_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  entityType  String   @map("entity_type")
  entityId    String   @map("entity_id")
  action      String
  description String
  ipAddress   String   @map("ip_address")
  userAgent   String?  @map("user_agent")
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

model Institution {
  id            Int             @id @default(autoincrement())
  name          String
  type          InstitutionType
  code          String          @unique
  address       String?
  contactPerson String?         @map("contact_person")
  phone         String?
  email         String?
  active        Boolean         @default(true)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")
  applications  Application[]

  @@map("institutions")
}

model CooperationCategory {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  icon         String?
  active       Boolean       @default(true)
  sortOrder    Int           @map("sort_order")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  applications Application[]

  @@map("cooperation_categories")
}

model LegalDocument {
  id             Int      @id @default(autoincrement())
  title          String
  documentNumber String   @unique @map("document_number")
  year           String
  category       String
  relativePath   String   @map("relative_path")
  description    String?
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  @@map("legal_documents")
}

model Setting {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  type        String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

model DashboardStat {
  id        String   @id @default(cuid())
  statKey   String   @map("stat_key")
  statValue String   @map("stat_value")
  date      DateTime
  createdAt DateTime @default(now()) @map("created_at")

  @@map("dashboard_stats")
}

model Report {
  id             String   @id @default(cuid())
  generatedBy    String   @map("generated_by")
  reportType     String   @map("report_type")
  parametersJson Json     @map("parameters_json")
  relativePath   String   @map("relative_path")
  generatedAt    DateTime @default(now()) @map("generated_at")
  expiresAt      DateTime @map("expires_at")
  generator      User     @relation(fields: [generatedBy], references: [id])

  @@map("reports")
}

model Cooperation {
  id                   String            @id @default(cuid())
  applicationId        String?           @map("application_id")
  title                String
  cooperationType      String
  cooperationTypeColor String            @map("cooperation_type_color")
  orgUnit              String            @map("org_unit")
  partnerInstitution   String            @map("partner_institution")
  cooperationDate      DateTime          @map("cooperation_date")
  startDate            DateTime?         @map("start_date")
  endDate              DateTime?         @map("end_date")
  location             String
  description          String?
  objectives           String?
  scope                String?
  documentPath         String?           @map("document_path")
  documentNumber       String?           @map("document_number")
  documentSize         Int?              @map("document_size")
  documentMimeType     String?           @map("document_mime_type")
  status               CooperationStatus @default("ACTIVE")
  notes                String?
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")
  application          Application?      @relation("ApplicationCooperations", fields: [applicationId], references: [id])

  @@map("cooperations")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  DOCUMENT_VERIFICATION
  LEGAL_REVIEW
  APPROVAL_PENDING
  APPROVED
  REJECTED
  REVISION_REQUIRED
  CANCELLED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum WorkflowStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  STATUS_CHANGE
  DOCUMENT_UPLOAD
  APPROVAL_REQUEST
  REJECTION_NOTICE
  REVISION_REQUEST
  DEADLINE_REMINDER
  SUBMISSION_CONFIRMATION
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

enum InstitutionType {
  UNIVERSITY
  PRIVATE_COMPANY
  HOSPITAL
  GOVERNMENT
  FINANCIAL
  NGO
  OTHER
}

enum CooperationStatus {
  ACTIVE
  EXPIRED
  TERMINATED
  DRAFT
}
